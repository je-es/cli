{"version":3,"sources":["../src/code/main.ts","../src/code/mod/cli.ts"],"sourcesContent":["/**\r\n * @name                                    main.ts\r\n * @description                             the entry point.\r\n * @author                                  Maysara Elshewehy\r\n * @repo                                    https://github.com/je-es/cli\r\n *\r\n * @note                                    This script follows the `MECS` code style\r\n*/\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── PACK ───────────────────────────────────────┐  */\r\n\r\n    export *                                from './mod/types.d';\r\n    export *                                from './mod/cli';\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */","/**\r\n * @name                                    cli.ts\r\n * @description                             The core module of the CLI.\r\n*/\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── TYPE ───────────────────────────────────────┐  */\r\n\r\n    import { t_action, t_actions, t_cli }   from './types';\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── CORE ───────────────────────────────────────┐  */\r\n\r\n    /**\r\n     * Parses the command line arguments and executes corresponding actions.\r\n     *\r\n     * @param   {t_cli}     options         - The options object containing information about the CLI application.\r\n     * \r\n     * @throws  {CLIError}                  - If an action is not found.\r\n     * @throws  {CLIError}                  - If an action argument is missing.\r\n     * @throws  {CLIError}                  - If an action requires are not found.\r\n    */\r\n    export const cli\r\n    = (options: t_cli)\r\n    : void =>\r\n    {\r\n        // - get passed args            ex: [ 'npx', 'myCLI', '--create', 'myApp', '--as', 'npm' ]\r\n        const passedArgs : string[] = process.argv.slice(2);\r\n\r\n        // - to store parsed args       ex: { create: { name: 'myApp', type: 'npm' } }\r\n        const parsedArgs : Record<string, any> = {};\r\n\r\n        // - loop through passed args\r\n        for (let i = 0; i < passedArgs.length; i++)\r\n        {\r\n            // - get arg                 ex: '-c'\r\n            const arg = passedArgs[i];\r\n\r\n            // - is it an action ?\r\n            if (arg.startsWith('-'))\r\n            {\r\n                const actionName            = Helpers.getAction(options.actions, arg);\r\n                const action                = options.actions[actionName];\r\n                const actionArgs            : Record<string, string> = {};\r\n\r\n                // - is it an action with args ?\r\n                if (action.args)\r\n                {\r\n                    // - check if there are enough arguments\r\n                    if (((passedArgs.length - i) - 1) < action.args.length)\r\n                    {\r\n                        throw new CLIError(`Missing argument for action '${arg}'.`);\r\n                    }\r\n\r\n                    // - parse args\r\n                    for (let k = 0; k < action.args.length; k++)\r\n                    {\r\n                        // - get next arg\r\n                        const nextArg = passedArgs[k + i + 1];\r\n\r\n                        // - check if next arg is an action\r\n                        if (nextArg.startsWith(\"-\"))\r\n                        {\r\n                            throw new CLIError(`Missing/Invalid argument for action '${arg}'.`);\r\n                        }\r\n\r\n                        // - store arg\r\n                        actionArgs[action.args[k]] = nextArg;\r\n                    }\r\n\r\n                    // - update index to skip the parsed args for this action\r\n                    i += action.args.length;\r\n                }\r\n\r\n                // - storing parsed args\r\n                parsedArgs[actionName] = actionArgs;\r\n            }\r\n        }\r\n\r\n        // - assign actions requires/options\r\n        for (const key in parsedArgs)\r\n        {\r\n            const action : t_action = options.actions[key];\r\n\r\n            // Requires\r\n            if (action.requires)\r\n            {\r\n                // - loop through requires\r\n                action.requires.forEach(require =>\r\n                {\r\n                    // - check if require is not found\r\n                    if (!parsedArgs[require])\r\n                    {\r\n                        throw new CLIError(`Missing required argument for action '${key}'.`);\r\n                    }\r\n\r\n                    // - merge requires args with action args\r\n                    parsedArgs[key] = { ...parsedArgs[key], ...parsedArgs[require] };\r\n                });\r\n            }\r\n\r\n            // Options\r\n            if (action.options)\r\n            {\r\n                // - loop through options\r\n                action.options.forEach(option =>\r\n                {\r\n                    // - set the option value\r\n                    parsedArgs[key][option] = parsedArgs[option] ? true : false;\r\n                });\r\n            }\r\n        }\r\n\r\n        // execute actions\r\n        for (const key in parsedArgs)\r\n        {\r\n            const action : t_action = options.actions[key];\r\n\r\n            if (action.callback)\r\n            {\r\n                action.callback(parsedArgs[key]);\r\n            }\r\n        }\r\n    };\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n\r\n\r\n\r\n/* ┌─────────────────────────────────────── HELP ───────────────────────────────────────┐  */\r\n\r\n    const Helpers =\r\n    {\r\n        /**\r\n         * A description of the entire function.\r\n         *\r\n         * @param   {t_actions} actions     - the actions object.\r\n         * @param   {string}    arg         - the argument.\r\n         * \r\n         * @throws  {CLIError}              - if the action not found.\r\n         * \r\n         * @return  {string} the action name.\r\n        */\r\n        getAction: (actions: t_actions, arg: string): string =>\r\n        {\r\n            // - loop through actions\r\n            for (const action in actions)\r\n            {\r\n                // - check if action flag or alias is equal to the passed arg\r\n                if (actions[action].flag === arg || actions[action].alias === arg)\r\n                {\r\n                    // - return action name\r\n                    return action;\r\n                }\r\n            }\r\n\r\n            throw new CLIError(`Action '${arg}' not found.`);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * The cli error class.\r\n    */\r\n    class CLIError extends Error\r\n    {\r\n        /**\r\n         * Constructs a new CLIError instance.\r\n         *\r\n         * @param {string}  message     - The error message.\r\n        */\r\n        constructor(message: string)\r\n        {\r\n            // - call parent constructor\r\n            super(message);\r\n\r\n            // - set name property\r\n            this.name = \"CLIError\";\r\n        }\r\n    }\r\n\r\n/* └────────────────────────────────────────────────────────────────────────────────────┘  */\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;AC0BW,IAAM,MACX,CAAC,YAEH;AAEI,QAAM,aAAwB,QAAQ,KAAK,MAAM,CAAC;AAGlD,QAAM,aAAmC,CAAC;AAG1C,WAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,KACvC;AAEI,UAAM,MAAM,WAAW,CAAC;AAGxB,QAAI,IAAI,WAAW,GAAG,GACtB;AACI,YAAM,aAAwB,QAAQ,UAAU,QAAQ,SAAS,GAAG;AACpE,YAAM,SAAwB,QAAQ,QAAQ,UAAU;AACxD,YAAM,aAAiD,CAAC;AAGxD,UAAI,OAAO,MACX;AAEI,YAAM,WAAW,SAAS,IAAK,IAAK,OAAO,KAAK,QAChD;AACI,gBAAM,IAAI,SAAS,gCAAgC,GAAG,IAAI;AAAA,QAC9D;AAGA,iBAAS,IAAI,GAAG,IAAI,OAAO,KAAK,QAAQ,KACxC;AAEI,gBAAM,UAAU,WAAW,IAAI,IAAI,CAAC;AAGpC,cAAI,QAAQ,WAAW,GAAG,GAC1B;AACI,kBAAM,IAAI,SAAS,wCAAwC,GAAG,IAAI;AAAA,UACtE;AAGA,qBAAW,OAAO,KAAK,CAAC,CAAC,IAAI;AAAA,QACjC;AAGA,aAAK,OAAO,KAAK;AAAA,MACrB;AAGA,iBAAW,UAAU,IAAI;AAAA,IAC7B;AAAA,EACJ;AAGA,aAAW,OAAO,YAClB;AACI,UAAM,SAAoB,QAAQ,QAAQ,GAAG;AAG7C,QAAI,OAAO,UACX;AAEI,aAAO,SAAS,QAAQ,CAAAA,aACxB;AAEI,YAAI,CAAC,WAAWA,QAAO,GACvB;AACI,gBAAM,IAAI,SAAS,yCAAyC,GAAG,IAAI;AAAA,QACvE;AAGA,mBAAW,GAAG,IAAI,EAAE,GAAG,WAAW,GAAG,GAAG,GAAG,WAAWA,QAAO,EAAE;AAAA,MACnE,CAAC;AAAA,IACL;AAGA,QAAI,OAAO,SACX;AAEI,aAAO,QAAQ,QAAQ,YACvB;AAEI,mBAAW,GAAG,EAAE,MAAM,IAAI,WAAW,MAAM,IAAI,OAAO;AAAA,MAC1D,CAAC;AAAA,IACL;AAAA,EACJ;AAGA,aAAW,OAAO,YAClB;AACI,UAAM,SAAoB,QAAQ,QAAQ,GAAG;AAE7C,QAAI,OAAO,UACX;AACI,aAAO,SAAS,WAAW,GAAG,CAAC;AAAA,IACnC;AAAA,EACJ;AACJ;AAQA,IAAM,UACN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWI,WAAW,CAAC,SAAoB,QAChC;AAEI,eAAW,UAAU,SACrB;AAEI,UAAI,QAAQ,MAAM,EAAE,SAAS,OAAO,QAAQ,MAAM,EAAE,UAAU,KAC9D;AAEI,eAAO;AAAA,MACX;AAAA,IACJ;AAEA,UAAM,IAAI,SAAS,WAAW,GAAG,cAAc;AAAA,EACnD;AACJ;AAKA,IAAM,WAAN,cAAuB,MACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMI,YAAY,SACZ;AAEI,UAAM,OAAO;AAGb,SAAK,OAAO;AAAA,EAChB;AACJ;","names":["require"]}